<%- include("./partial/header.ejs");%>

<!-- ...........chat-container start........... -->
<div id="chat-container">
  <!-- ...........search-container start........... -->
  <div id="search-container">
    <input type="text" placeholder="Search" />
  </div>
  <!-- ......search-container End........... -->
  <!-- ........conversation-list start................... -->
  <div id="conversation-list">
    <% data.forEach(function(conversation){ %>
    <!-- conversation creator is same to logged in user, so we need to show  participant name and avatar -->
    <% if(conversation.creator.id == loggedInUser.userid) {%>
    <div
      class="conversation"
      onclick="getMessages('<%= conversation._id %>', '<%= conversation.participant.name %>')"
    >
      <% if(conversation.participant.avatar){%>
      <img
        src="./uploads/avatars/<%= conversation.participant.avatar %>"
        alt="<%= conversation.participant.name %>"
      />
      <%}else{%>
      <img src="./images/nophoto.png" />
      <%} %>
      <div class="title-text"><%= conversation.participant.name %></div>
      <div class="conversation-date">
        <%= moment(conversation.last_updated).fromNow() %>
      </div>
    </div>
    <% }else{ %>
    <div
      class="conversation"
      onclick="getMessages('<%= conversation._id %>', '<%= conversation.creator.name %>')"
    >
      <% if(conversation.creator.avatar){%>
      <img
        src="./uploads/avatars/<%= conversation.creator.avatar %>"
        alt="<%= conversation.creator.name %>"
      />
      <%}else{%>
      <img src="./images/nophoto.png" />
      <%} %>
      <div class="title-text"><%= conversation.creator.name %></div>
      <div class="conversation-date">
        <%= moment(conversation.last_updated).fromNow() %>
      </div>
    </div>
    <%} %> <% });%>

    <!-- show no conversation placeholder image for 0 conversations -->

    <% if(data && data.length === 0){%>
    <div class="nothing"><img src="./images/no-conversation.svg" /></div>
    <%}%>
  </div>
  <!-- .....conversation-list End.............. -->

  <!-- ....new-message-container start............. -->
  <div class="new-message-container" onclick="openModal()">
    <a href="#">+</a>
  </div>
  <!-- ....new-message-container End............. -->

  <!-- ....chat-title start............. -->
  <div id="chat-title">
    <span id="conversation-partner"></span>
    <img src="./images/trash.png" alt="Delete Conversation" />
  </div>
  <!-- ....chat-title End............. -->

  <!-- placeholder div if no messages are in messages area -->
  <div id="chat-message-list">
    <div class="nothing">select a conversation</div>
  </div>
  <!-- ...........placeholder div End........... -->

  <!-- send message form -->
  <form id="chat-form" method="post" enctype="multipart/form-data">
    <label for="attachment"
      ><img src="./images/attachment.png" alt="Add Attachment"
    /></label>
    <input
      type="file"
      multiple
      name="attachment"
      class="hide"
      id="attachment"
    />
    <input
      type="text"
      name="message"
      placeholder="Type a message"
      autocomplete="off"
    />
  </form>
  <!-- send message form end -->
</div>
<!-- ...........chat-container End........... -->
<%- include('./partial/add-conversation-modal.ejs'); %>

<!-- import socket io client from cdn -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.min.js"></script>

<script>
  const form = document.querySelector("#chat-form");
  const messageContainer = document.querySelector("");
  const loggedinUserId = "<%= loggedInUser.userid %>";
  const loggedinUserName = "<%= loggedInUser.username %>";
  let participant = null; // selected conversation participant object
  let current_conversation_id; // selected conversation id

  // socket initialization
  const socket = io("<%= process.env.APP_URL %>");

  // handle new/live incoming message from socket
  socket.on("new_message", (data) => {
    // only respond if current conversation is open in any client
    if (data.message.conversation_id == current_conversation_id) {
      // message class
      const messageClass =
        data.message.sender.id === loggedinUserId
          ? "you-message"
          : "other-message";
      const senderAvatar = data.message.sender.avatar
        ? `<img src="./uploads/avatars/${data.message.sender.avatar}" alt="${data.message.sender.name}" />`
        : `<img src="./images/nophoto.png" alt="${data.message.sender.name}" />`;
      // message attachments
      let attachment = '<div class="attachments">';

      if (data.message.attachment && data.message.attachment.length > 0) {
        data.message.attachment.forEach((attachment) => {
          attachment += `<img src="./uploads/attachments/${attachment}" /> `;
        });
      }
      attachment += "</div>";
      let messageHTML;
      // do not show avatar for loggedin user
      if (data.message.sender.id == loggedinUserId) {
        messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              <div class="message-text">${data.message.message}</div>
              ${attachments}
              <div class="message-time">${moment(
                data.message.date_time
              ).fromNow()}</div>
            </div></div>`;
      } else {
        messageHTML = `<div class="message-row ${messageClass}"><div class="message-content">
              ${senderAvatar}
              <div class="message-text">${data.message.message}</div>
              ${attachments}
              <div class="message-time">${moment(
                data.message.date_time
              ).fromNow()}</div>
            </div></div>`;
      }
      // append the inoming message to message area as last item
      document
        .querySelector("#chat-message-list > .message-row:first-child")
        .insertAdjacentHTML("beforeBegin", messageHTML);
    }
  });
  // get messages of a conversation
  async function getMessages(conversation_id, current_conversation_name) {
    // messages failure toast
    const messagesFailureToast = Toastify({
      text: "Error loading messages!",
      duration: 1000,
    });
    let response = await fetch(`/inbox/messages/${conversation_id}`);
    const result = await response.json();

    if (!result.errors && result.data) {
      form.style.visibility = "visible";
      const { data, user, conversation_id } = result;

      participant = data.participant;
      current_conversation_id = conversation_id;

      if (data.message) {
        let allMessages = "";

        if (data.message.length > 0) {
          data.message.forEach((message) => {
            let senderAvatar = message.sender.avatar
              ? `./uploads/avatars/${message.sender.avatar}`
              : "./images/nophoto.png";
            const messageClass =
              message.sender.id === loggedinUserId
                ? "you-message"
                : "other-message";
            const showAvatar =
              message.sender.id === loggedinUserId
                ? ""
                : `<img src="${senderAvatar}" alt="${message.sender.name}" />`;

            // message attachments
            let attachments = '<div class="attachments">';

            if (message.attachment && message.attachment.length > 0) {
              message.attachment.forEach((attachment) => {
                attachments += `<img src="./uploads/attachments/${attachment}" /> `;
              });
            }

            attachments += "</div>";
          });
        }
      }
    }
  }
</script>
